/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sistema.view;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Date;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sistema.bean.Ponto;
import sistema.dao.FuncionarioDAO;
import sistema.dao.PontoDAO;

/**
 *
 * @author ambiental.pelotas
 */
public class FormPonto extends javax.swing.JInternalFrame {

    private JFrame mdi;

    /**
     * Creates new form FormPonto
     */
    public FormPonto(JFrame mdi) {
        this.mdi = mdi;
        initComponents();
        this.atualizaLista();
    }

    private void atualizaLista() {
        try {
            PontoDAO pontoDAO = new PontoDAO(TelaPrincipal.getConexao());
            List<Ponto> lista = pontoDAO.listaTodos();
            DefaultTableModel dtm = (DefaultTableModel) this.tbPonto.getModel();
            dtm.setRowCount(0);
            for (Ponto list : lista) {
                //dtm.addRow(new Object[]{list.getNsr(), list.getPis(), list.getData(), list.getHorario()});
                dtm.addRow(new Object[]{list.getNsr(), list.getPis(), list.getDataHorario()});
            }
        } catch (SQLException ex) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btImportar = new javax.swing.JButton();
        btAtualizar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbPonto = new javax.swing.JTable();

        setClosable(true);
        setTitle("Gerenciamento das Marcações Ponto");
        setVisible(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Opções"));
        jPanel1.setFocusCycleRoot(true);
        jPanel1.setFocusTraversalPolicyProvider(true);

        btImportar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/import.png"))); // NOI18N
        btImportar.setText("Importar Marcações");
        btImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btImportarActionPerformed(evt);
            }
        });

        btAtualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/atualizar.png"))); // NOI18N
        btAtualizar.setText("Atualizar");
        btAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAtualizarActionPerformed(evt);
            }
        });

        jButton1.setText("teste");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btImportar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btAtualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(btImportar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tbPonto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "NSR", "PIS", "DATA-HORARIO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbPonto);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btImportarActionPerformed
        // TODO add your handling code here:  
        this.setVisible(true);
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int resultado = fc.showOpenDialog(this);
        if (resultado == JFileChooser.APPROVE_OPTION) {
            File arquivo = fc.getSelectedFile();
            FileReader input;
            try {

                input = new FileReader(arquivo);
                BufferedReader leitor = new BufferedReader(input);

                String pis = "";
                String data = "";
                String horario = "";
                String nsr = "";
                String dia = "";
                String mes = "";
                String ano = "";
                String hora = "";
                String minutos = "";

                String a = null;

                PontoDAO pDAO = new PontoDAO(TelaPrincipal.getConexao());
                FuncionarioDAO fDAO = new FuncionarioDAO(TelaPrincipal.getConexao());
                
                while ((a = leitor.readLine()) != null) {

                    Ponto p1 = new Ponto();
                                        
                    nsr = a.substring(0, 10);
                    dia = a.substring(10, 12);
                    mes = a.substring(12, 14);
                    ano = a.substring(14, 18);
                    hora = a.substring(18, 20);
                    minutos = a.substring(20, 22);

                    pis = a.substring(23, 34);

                    data = ano + "-" + mes + "-" + dia + " ";
                    horario = hora + ":" + minutos + ":00";

                    Timestamp dataFormatada = Timestamp.valueOf(data + horario);
                    
                    Integer id_funcionario = fDAO.buscaPis(pis);
                    
                    System.out.println("teste");
                    
                    Date d = new Date(Integer.valueOf(ano), Integer.valueOf(mes), Integer.valueOf(dia));
                    
                    Boolean insert = pDAO.ponto_do_dia(id_funcionario, d);
                    
                    //chamar método verifica_escala
                    
                    pDAO.insert_ponto(id_funcionario, "data_entrada1", insert, dataFormatada);
                    
                    System.out.println("Passou 2");

                    p1.setNsr(nsr);
                    p1.setData(data);
                    p1.setHorario(horario);
                    p1.setPis(pis);
                    p1.setDataHorario(dataFormatada);

                    System.out.println("Mostra Hora: " + dataFormatada);
                    System.out.println("ID: " + id_funcionario);
                    System.out.println("Número de registro: " + nsr);
                    System.out.println("Número do PIS: " + pis);
                    System.out.println("Data: " + data);
                    System.out.println("Horário da marcação: " + horario + "\n");

                    PontoDAO pontoI = new PontoDAO(TelaPrincipal.getConexao());

                    pontoI.inserir(p1);

                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(FormPonto.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FormPonto.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(FormPonto.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Você não selecionou nenhum arquivo.");
        }

    }//GEN-LAST:event_btImportarActionPerformed

    private void btAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAtualizarActionPerformed
        // TODO add your handling code here:
        this.revalidate();
        this.atualizaLista();
    }//GEN-LAST:event_btAtualizarActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:
        this.revalidate();
    }//GEN-LAST:event_formInternalFrameClosed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(true);
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int resultado = fc.showOpenDialog(this);
        if (resultado == JFileChooser.APPROVE_OPTION) {
            File arquivo = fc.getSelectedFile();
            FileReader input;
            try {

                input = new FileReader(arquivo);
                BufferedReader leitor = new BufferedReader(input);

                String pis = "";
                String data = "";
                String horario = "";
                String nsr = "";
                String dia = "";
                String mes = "";
                String ano = "";
                String hora = "";
                String minutos = "";

                String a = null;

                FuncionarioDAO fDAO = new FuncionarioDAO(TelaPrincipal.getConexao());
                PontoDAO pDAO = new PontoDAO(TelaPrincipal.getConexao());

                while ((a = leitor.readLine()) != null) {

                    nsr = a.substring(0, 10);
                    dia = a.substring(10, 12);
                    mes = a.substring(12, 14);
                    ano = a.substring(14, 18);
                    hora = a.substring(18, 20);
                    minutos = a.substring(20, 22);
                    pis = a.substring(23, 34);

                    //data = ano + "-" + mes + "-" + dia + " ";
                    data = ano + "-" + mes + "-" + dia  + " ";
                    horario = hora + ":" + minutos + ":00";

                    System.out.println("Passou " + data + " " + horario);
                    
                    Date dataTeste = Date.valueOf(data);
                    
                    System.out.println("Passou1");
                    
                    Timestamp dataFormatada = Timestamp.valueOf(data + horario);

                   // Timestamp dataFormatada = "2014-08-25 05:17:00";
                    
                    System.out.println("Passou2");
                    
                    Integer id_funcionario = fDAO.buscaPis(pis);

                    System.out.println("Passou3");
                    
                    String campo_escala = "data_entrada1";
                    
                    Boolean insert = true;//pDAO.ponto_do_dia(id_funcionario, dataTeste);
                    
                    System.out.println("Passou4");
                    
                    pDAO.insert_ponto(id_funcionario, campo_escala, insert, dataFormatada);
                    
                    System.out.println("Passou 5");
                    /*
                     ALGORITMO PARA IMPORTAR

                     While até o fim do arquivo
                     Integer id_funcionario = método para descobrir o id do funcionario através do pis; (já criamos na última reunião)
                     String campo_escala = verifica_escala(id_funcionario, hora que vem do arquivo);
	
                     Boolean	insert = ponto_do_dia(id_funcionario, data que vem do arquivo)
	
                     insert_ponto(campos da tabela ponto, campo_escala, insert);
                     end;
                     */
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(FormPonto.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FormPonto.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(FormPonto.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Você não selecionou nenhum arquivo.");
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAtualizar;
    private javax.swing.JButton btImportar;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbPonto;
    // End of variables declaration//GEN-END:variables
}
